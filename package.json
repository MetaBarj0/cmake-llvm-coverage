{
  "name": "cmake-llvm-coverage",
  "displayName": "Source code coverage using cmake and Llvm compiler infrastructure.",
  "description": "Visual code coverage indicators for source code files using Llvm and cmake capabilities.",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.56.0"
  },
  "categories": [
    "Programming Languages",
    "Linters"
  ],
  "publisher": "SbastienLevy",
  "homepage": "https://github.com/MetaBarj0/cmake-llvm-coverage",
  "repository": {
    "url": "https://github.com/MetaBarj0/cmake-llvm-coverage"
  },
  "bugs": {
    "url": "https://github.com/MetaBarj0/cmake-llvm-coverage/issues"
  },
  "keywords": [
    "cmake",
    "tdd",
    "unit",
    "test",
    "coverage",
    "llvm",
    "cpp",
    "c++",
    "lint"
  ],
  "activationEvents": [
    "onCommand:cmake-llvm-coverage.displayMissingCoverage"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": [
      {
        "title": "cmake-llvm-coverage",
        "properties": {
          "cmake-llvm-coverage.cmakeCommand": {
            "type": "string",
            "default": "cmake",
            "minLength": 1,
            "scope": "window",
            "description": "The command to invoke cmake. May be an absolute path on the file system or just `cmake` if this latter is in your `$PATH` environment variable."
          },
          "cmake-llvm-coverage.buildTreeDirectory": {
            "type": "string",
            "default": "build",
            "minLength": 1,
            "scope": "window",
            "description": "The build tree root directory of your cmake project, relative to your workspace directory."
          },
          "cmake-llvm-coverage.cmakeTarget": {
            "type": "string",
            "default": "coverage",
            "minLength": 1,
            "scope": "window",
            "description": "The target that generates coverage information in json format files. Those files may be generated in the build directory specified in the `Build Tree Directory` setting. The specified target must exist."
          },
          "cmake-llvm-coverage.coverageInfoFileName": {
            "type": "string",
            "default": "coverage.json",
            "minLength": 1,
            "scope": "window",
            "description": "The name of the json file containing coverage information. This file will be searched within the `buildTreeDirectory` hierarchy. This file must be unique."
          },
          "cmake-llvm-coverage.additionalCmakeOptions": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "scope": "window",
            "description": "Additional options to pass to cmake, for instance, variable definitions indicating which compiler to use, preprocessor defines, etc."
          }
        }
      }
    ],
    "menus": {
      "editor/title": [
        {
          "when": "resourceLangId == cpp",
          "group": "navigation",
          "command": "cmake-llvm-coverage.displayMissingCoverage"
        }
      ],
      "commandPalette": [
        {
          "when": "resourceLangId == cpp",
          "command": "cmake-llvm-coverage.displayMissingCoverage"
        }
      ]
    },
    "commands": [
      {
        "command": "cmake-llvm-coverage.displayMissingCoverage",
        "title": "Display uncovered code regions",
        "enablement": "resourceLangId == cpp"
      }
    ],
    "colors": [
      {
        "id": "cmakeLlvmCoverage.uncoveredCodeRegionBackground",
        "description": "Background decoration for an uncovered code region",
        "defaults": {
          "dark": "#FF000055",
          "light": "#FF000055",
          "highContrast": "#FF000055"
        }
      }
    ],
    "languages": [
      {
        "id": "cpp",
        "aliases": [
          "c++",
          "C++",
          "cpp",
          "CPP"
        ],
        "extensions": [
          ".cpp",
          ".hpp",
          ".cxx",
          ".hxx",
          ".c++",
          ".h++",
          "h"
        ]
      }
    ]
  },
  "scripts": {
    "package": "npm run compile && vsce package",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/tests/run-test.js",
    "deploy": "npm run package && vsce publish -p",
    "vscode:prepublish": "webpack --mode production",
    "webpack": "webpack --mode development",
    "webpack-dev": "webpack --mode development --watch",
    "test-compile": "tsc -p ./"
  },
  "devDependencies": {
    "@types/chai": "^4.2.18",
    "@types/chai-as-promised": "^7.1.4",
    "@types/fs-extra": "^9.0.11",
    "@types/glob": "^7.1.3",
    "@types/mocha": "^8.2.2",
    "@types/node": "^15.12.1",
    "@types/vscode": "^1.56.0",
    "@typescript-eslint/eslint-plugin": "^4.26.0",
    "@typescript-eslint/parser": "^4.26.0",
    "chai": "^4.3.4",
    "chai-as-promised": "^7.1.1",
    "eslint": "^7.27.0",
    "fs-extra": "^10.0.0",
    "glob": "^7.1.7",
    "mocha": "^8.4.0",
    "ts-loader": "^9.2.2",
    "typescript": "^4.3.2",
    "vsce": "^1.92.0",
    "vscode-test": "^1.5.2",
    "webpack": "^5.38.1",
    "webpack-cli": "^4.7.0"
  },
  "dependencies": {
    "@types/stream-json": "^1.7.0",
    "stream-json": "^1.7.1"
  }
}